interaction_lit_up_manual = 
{
	interaction = manual
	scope = interactable.light_source.manual.fit(not lit_up)
	depends = closer_than(1)
	action = 
	{
		light_source.lit_up = yes
	}
}

interaction_lit_up_remote =
{
	interaction = manual
	scope = interactable.manual.remote_controller.controlled.light_source.fit(not lit_up)
	depends = closer_than(1)
	action = 
	{
		log = remote_controller.controlled.light_source
		remote_controller.controlled.light_source.lit_up = yes
	}
}

lit_up_room_manual =
{
	ai_action = yes
	category = lit_up_room
	scope = light_sensor.actor.can_do(interaction_lit_up_manual)
	utility = 
	{
		cache(light) = any(all_objects, interactable.can(interaction_lit_up_manual))
		if(light).ut = 10 - light_sensor.light
	}
	action = {
		do(interaction_lit_up_manual) = light
	}
}

lit_up_room_remote =
{
	ai_action = yes
	category = lit_up_room
	scope = light_sensor.actor.can_do(interaction_lit_up_remote)
	utility = 
	{
		cache(remote_c) = any(all_objects, remote.controller.interactable.can(interaction_lit_up_remote)).remote.controller
		if(remote_c).ut = 10 - light_sensor.light
	}
	action = {
		do(interaction_lit_up_remote) = remote_c
	}
}


basic_move =
{
	ai_action = yes
	category = move_to
	scope = movable
	utility = 
	{
		if(has(target)).ut = 1
	}
	action = {
		movable = 
		{
			goto(distance) = target
			log = "Target: " + target
			wait(is_moving and log("updated basic_move"), not is_moving and not near_target) = yes
		}
	}
}


facts_notice =
{
	ai_action = yes
	category = testing
	scope = facts
	utility = {
		if(facts.has_noticed_test_event) = {
			log = "Utility: noticed test event" + root
			ut = 1
		}
	}
	action = {
		log = "I've noticed an event!"
	}
}